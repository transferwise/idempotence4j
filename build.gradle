wrapper {
	gradleVersion = '6.4.1'
}

buildscript {
	repositories {
		maven { url "https://arti.tw.ee/artifactory/libs-release" }
		maven { url "https://jitpack.io" }
		mavenLocal()
	}
	dependencies {
		classpath 'net.researchgate:gradle-release:2.8.1'
		classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:2.1.1'
		classpath "com.avast.gradle:gradle-docker-compose-plugin:0.12.1"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.4.RELEASE"
	}
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'groovy'
	apply plugin: 'maven-publish'
	apply plugin: 'net.researchgate.release'
	apply plugin: 'org.unbroken-dome.test-sets'
	apply from: "${rootDir}/libraries.gradle"
	apply from: "${rootDir}/publish.gradle"

	version = getVersion(project)

	sourceCompatibility = '1.9'
	targetCompatibility = '1.9'
	repositories {
		maven {
			url 'https://arti.tw.ee/artifactory/libs-release'
		}
		mavenLocal()
	}

	testSets {
		integrationTest {
			dirName = 'test-integration'
		}
	}

	dependencies {
        annotationProcessor libraries.lombok
        compileOnly libraries.lombok
        compileOnly libraries.groovy

        implementation libraries.slf4j

        testImplementation libraries.groovy
        testImplementation libraries.junit
        testImplementation libraries.spock
	}

	task sourcesJar(type: Jar, dependsOn: classes, group: 'build') {
		archiveClassifier = 'sources'
		from sourceSets.main.allSource
	}

	artifacts {
		archives sourcesJar
	}

	test {
		reports.junitXml.destination = file('build/test-results')

		testLogging {
			events "passed", "skipped", "failed", "standardError"
			showStackTraces = true
			exceptionFormat = 'full'
		}
	}


	integrationTest {
		reports.junitXml.destination = file('build/test-integration-results')

		testLogging {
			events "passed", "skipped", "failed", "standardError"
			showStackTraces = true
			exceptionFormat = 'full'
		}
	}
	check.dependsOn integrationTest
	afterReleaseBuild.dependsOn publish

	ext.isRunningOnCI = {
		System.getenv("CI") == "true"
	}
}

static getVersion(project) {
    branchName() == 'master' ? project.version : project.version + '-SNAPSHOT'
}

static branchName() {
    'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}
